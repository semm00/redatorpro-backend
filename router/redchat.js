import express from 'express';
import { PrismaClient } from '@prisma/client';
import { GoogleGenerativeAI } from '@google/generative-ai';
import multer from 'multer';
import { createClient } from '@supabase/supabase-js';
import axios from 'axios'; // Adicione esta linha no topo

const router = express.Router();
const prisma = new PrismaClient();
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Configura√ß√£o do Supabase
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

// Configura√ß√£o do multer para upload de imagem
const upload = multer({ storage: multer.memoryStorage() });

router.post('/', upload.single('imagem'), async (req, res) => {
  const { tipoCorrecao, tema, texto } = req.body;
  const file = req.file;

  if (!req.user) {
    return res.status(401).json({ error: 'Usu√°rio n√£o autenticado.' });
  }

  // Impede envio de texto e imagem juntos
  if ((file && texto && texto.trim()) || (!file && (!texto || !texto.trim()))) {
    return res.status(400).json({ error: 'Envie apenas o texto digitado OU apenas a imagem da reda√ß√£o.' });
  }

  // Padroniza o tipo de corre√ß√£o para min√∫sculo
  const tipo = tipoCorrecao ? tipoCorrecao.toLowerCase() : '';

  // Prompt personalizado conforme o tipo de corre√ß√£o (igual ao gemini.js)
  let prompt = '';
  if (tipo === 'enem') {
    prompt = `
Texto para corre√ß√£o (Tema: ${tema}):
    ${texto}
Voc√™ √© uma IA corretora de reda√ß√µes com base no modelo do ENEM. Avalie reda√ß√µes dissertativo-argumentativas com base nas cinco compet√™ncias oficiais (C1 a C5), atribuindo coment√°rios explicativos, sugest√µes de corre√ß√£o e notas de 0 a 200 para cada compet√™ncia.
Para cada compet√™ncia:
Atribua uma nota entre os n√≠veis oficiais (0, 40, 80, 120, 160 ou 200).

üß† Compet√™ncia I ‚Äî Dom√≠nio da Norma Culta da L√≠ngua Portuguesa
Avalie se o participante:

Domina a escrita formal da L√≠ngua Portuguesa.

Cometeu erros ortogr√°ficos, de pontua√ß√£o, morfossintaxe, acentua√ß√£o ou concord√¢ncia.

Para cada erro:

Destaque o trecho com problema.

Explique o motivo do erro (ex: "erro de concord√¢ncia verbal").

Apresente a forma correta.

Exemplo:

‚ÄúAs pessoa est√£o felizes.‚Äù
‚úÖ Correto: ‚ÄúAs pessoas est√£o felizes.‚Äù
‚ùå Erro: Concord√¢ncia nominal no plural.

üìö Compet√™ncia II ‚Äî Compreens√£o da Proposta e Aplica√ß√£o de Conhecimentos
Verifique:

Se a reda√ß√£o atende plenamente ao tema.

Se est√° dentro da tipologia dissertativo-argumentativa (introdu√ß√£o, desenvolvimento, conclus√£o).

Se o repert√≥rio √© legitimado (com base em √°reas do conhecimento) e pertinente ao tema.

Se evita c√≥pias dos textos motivadores.

‚ö†Ô∏è Penalize:

Fuga ao tema,

Tang√™ncia (aborda parcialmente),

Partes embrion√°rias (muito curtas),

Repert√≥rio n√£o legitimado ou improdutivo.

üß© Compet√™ncia III ‚Äî Organiza√ß√£o, Argumenta√ß√£o e Sele√ß√£o de Informa√ß√µes
Avalie:

Clareza do ponto de vista.

Se h√° sele√ß√£o, organiza√ß√£o e interpreta√ß√£o de ideias e dados.

Se a argumenta√ß√£o √© progressiva e coesa.

Se h√° autoridade argumentativa, n√£o apenas opini√µes soltas.

‚ö†Ô∏è Critique:

Contradi√ß√µes ou repeti√ß√µes.

C√≥pia ou reprodu√ß√£o de ideias dos textos motivadores.

Generaliza√ß√µes sem sustenta√ß√£o.

üîó Compet√™ncia IV ‚Äî Coes√£o Textual
Verifique o uso de:

Elementos coesivos inter e intrapar√°grafos.

Operadores argumentativos (‚Äúportanto‚Äù, ‚Äúal√©m disso‚Äù, ‚Äúcontudo‚Äù, ‚Äúlogo‚Äù, etc.).

Pronomes e substitui√ß√µes lexicais que estabelecem continuidade.

Avalie:

Se h√° diversidade e adequa√ß√£o no uso dos conectivos.

Se h√° repeti√ß√µes excessivas ou inadequa√ß√µes (ex: conectivos mal empregados ou sem fun√ß√£o real).

Se h√° coer√™ncia progressiva entre os par√°grafos.

‚ö†Ô∏è Reda√ß√µes com monobloco, ou com apenas justaposi√ß√µes de ideias, n√£o devem ultrapassar nota 120.

üõ†Ô∏è Compet√™ncia V ‚Äî Proposta de Interven√ß√£o
Verifique se h√° proposta de interven√ß√£o detalhada e vi√°vel, com:

A√ß√£o (o que ser√° feito),

Agente (quem far√°),

Meio (como ser√° feita),

Finalidade (efeito pretendido),

Detalhamento (exemplo, contexto, ou explica√ß√£o adicional).

‚ö†Ô∏è Penalize propostas gen√©ricas, incompletas ou que violam direitos humanos.

üìä Resultado Esperado
Para cada compet√™ncia, gere:

‚úÖ Nota de 0 a 200.
IMPORTANTE: Ao final da resposta, escreva a nota total (soma das compet√™ncias) no formato: "Nota Final: [valor num√©rico]".

üìå Coment√°rios espec√≠ficos e t√©cnicos sobre os pontos fortes e falhas.

üõ†Ô∏è Corre√ß√µes pr√°ticas com justificativas, especialmente em Compet√™ncia I.

üí° Dica personalizada de melhoria ao final.

Texto para corre√ß√£o:
${texto}
`;
  } else if (tipo === 'concursos') {
    prompt = `
    Texto para corre√ß√£o (Tema: ${tema}):
    ${texto}
Analise a reda√ß√£o abaixo conforme os crit√©rios oficiais da FCC, que avalia disserta√ß√µes argumentativas em tr√™s eixos principais: Conte√∫do (40 pontos), Estrutura (30 pontos) e Express√£o (30 pontos). A nota total √© de 100 pontos.

Crit√©rios de Corre√ß√£o Detalhados
1. CONTE√öDO (40 pontos)
Avalie:
- Perspectiva cr√≠tica: O texto apresenta uma abordagem original e bem fundamentada sobre o tema?
- An√°lise e senso cr√≠tico: H√° argumenta√ß√£o l√≥gica, com reflex√£o profunda (n√£o apenas senso comum)?
- Consist√™ncia e coer√™ncia: Os argumentos s√£o bem encadeados e sustentados com exemplos, dados ou refer√™ncias?
Penaliza√ß√µes:
- Abordagem tangencial, superficial ou c√≥pia de textos da prova.

2. ESTRUTURA (30 pontos)
Avalie:
- G√™nero textual: √â uma disserta√ß√£o argumentativa (n√£o narrativa ou descritiva)?
- Progress√£o textual: Os par√°grafos seguem uma sequ√™ncia l√≥gica (introdu√ß√£o ‚Üí desenvolvimento ‚Üí conclus√£o)?
- Coes√£o: Uso adequado de conectivos e articula√ß√£o entre frases/par√°grafos.

3. EXPRESS√ÉO (30 pontos)
Avalie:
- Norma culta: Dom√≠nio da gram√°tica (concord√¢ncia, reg√™ncia, pontua√ß√£o, acentua√ß√£o, etc.).
- Clareza e precis√£o: Vocabul√°rio adequado e evitou repeti√ß√µes ou ambiguidades?
- N√≠vel de linguagem: Formalidade compat√≠vel com o g√™nero dissertativo.

Solicita√ß√µes Espec√≠ficas:
Atribua notas parciais (0 a 40 para Conte√∫do; 0 a 30 para Estrutura e Express√£o).
Nota final: Soma das tr√™s partes (0 a 100).
IMPORTANTE: Ao final da resposta, escreva a nota total no formato: "Nota Final: [valor num√©rico]".

Destaque:
- 2 pontos fortes (ex.: argumenta√ß√£o s√≥lida, coes√£o eficiente).
- 2 pontos fracos (ex.: generaliza√ß√µes, erros de reg√™ncia).

Sugest√µes de melhoria: Recomenda√ß√µes espec√≠ficas (ex.: aprofundar um argumento, revisar concord√¢ncia).

Texto para corre√ß√£o:
${texto}
`;
  } else if (tipo === 'fuvest') {
    prompt = `
    Texto para corre√ß√£o (Tema: ${tema}):
    ${texto}
Avalie a reda√ß√£o abaixo conforme os crit√©rios oficiais da FUVEST, atribuindo nota de 10 a 50 pontos. Siga esta estrutura:

Crit√©rios de Avalia√ß√£o:

1. Desenvolvimento do tema e organiza√ß√£o do texto dissertativo-argumentativo:
- Verifique se o texto √© uma disserta√ß√£o argumentativa e atende ao tema proposto.
- Avalie a capacidade de compreender a proposta, relacionar ideias e informa√ß√µes, pertin√™ncia das informa√ß√µes, progress√£o tem√°tica e capacidade cr√≠tico-argumentativa.
- Evite par√°frase da proposta e textos meramente expositivos.

2. Coer√™ncia dos argumentos e articula√ß√£o das partes do texto:
- Avalie a coer√™ncia dos argumentos, organiza√ß√£o das ideias, conclus√µes apropriadas, planejamento e constru√ß√£o significativa do texto.
- Verifique a coes√£o textual, uso adequado de conectivos e rela√ß√µes sem√¢nticas entre as partes do texto.

3. Corre√ß√£o gramatical e adequa√ß√£o vocabular:
- Avalie o dom√≠nio da norma-padr√£o da L√≠ngua Portuguesa, clareza na express√£o das ideias, ortografia, morfologia, sintaxe, pontua√ß√£o e vocabul√°rio.
- Considere precis√£o, concis√£o e adequa√ß√£o do vocabul√°rio ao tipo de texto.

Notas:
- Para cada um dos tr√™s crit√©rios, atribua uma nota de 1 a 5.
- Multiplique as notas por 4, 3 e 3, respectivamente, para obter a nota ponderada.
- Some as notas ponderadas para obter a nota final (m√≠nimo 10, m√°ximo 50 pontos).
IMPORTANTE: Ao final da resposta, escreva a nota total no formato: "Nota Final: [valor num√©rico]".

Pontos Fortes e Pontos a Melhorar:
- Liste 2 pontos positivos e 2 aspectos que podem ser aprimorados.

Sugest√µes de Melhoria:
- Ofere√ßa recomenda√ß√µes espec√≠ficas para elevar a nota em cada crit√©rio.

Texto para corre√ß√£o:
${texto}
`;
  } else {
    prompt = `
Corrija o texto abaixo considerando crit√©rios gerais de reda√ß√£o.
Atribua uma nota de 0 a 100 e fa√ßa coment√°rios detalhados sobre os pontos positivos e negativos.
IMPORTANTE: Ao final da resposta, escreva a nota total no formato: "Nota Final: [valor num√©rico]".

Texto do aluno:
${texto}
`;
  }

  // Upload da imagem para o Supabase, se houver
  let urlImage = null;
  let geminiImagePart = null;
  if (file) {
    try {
      // Sanitiza o nome do arquivo para evitar caracteres inv√°lidos no Supabase
      const originalName = file.originalname.replace(/[^a-zA-Z0-9.\-_]/g, '_');
      const filePath = `${Date.now()}_${originalName}`;
      const { error } = await supabase.storage
        .from("redator")
        .upload(filePath, file.buffer, { contentType: file.mimetype });
      if (error) throw error;
      urlImage = supabase.storage.from("redator").getPublicUrl(filePath).data.publicUrl;

      // Baixa a imagem do Supabase para obter o buffer
      const response = await axios.get(urlImage, { responseType: 'arraybuffer' });
      const buffer = Buffer.from(response.data, 'binary');
      const base64 = buffer.toString('base64');
      geminiImagePart = {
        inlineData: {
          data: base64,
          mimeType: file.mimetype
        }
      };
    } catch (err) {
      console.error("Erro ao enviar imagem para o Supabase ou preparar imagem para Gemini:", err.message);
      return res.status(500).json({ error: "Erro ao enviar imagem." });
    }
  }

  try {
    // Monta entrada para Gemini (texto ou multimodal)
    let geminiInput;
    if (geminiImagePart) {
      // Entrada multimodal: prompt + imagem (base64)
      geminiInput = [
        { text: prompt },
        geminiImagePart
      ];
    } else {
      geminiInput = prompt;
    }

    // Usa o modelo Gemini 1.5 Flash
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(geminiInput);
    const response = await result.response;
    const correcao = response.text();

    // LOG para depura√ß√£o
    console.log('Texto da corre√ß√£o:', correcao);

    // Regex robusto para pegar a nota final (mesmo com espa√ßos, quebras de linha, etc)
    const notaMatch =
      correcao.match(/nota\s*final[^0-9]{0,10}(\d{2,4})/i) ||
      correcao.match(/nota[^0-9]{0,10}(\d{2,4})/i);

    console.log('Resultado do regex da nota:', notaMatch);

    const nota = notaMatch ? Number(notaMatch[1]) : null;
    console.log('Nota extra√≠da:', nota);

    const essay = await prisma.essay.create({
      data: {
        text: texto && texto.trim() ? texto : null,
        urlImage: urlImage,
        authorId: req.user.id,
        corrigidaPor: "ia",
        correcaoIa: correcao,
        tipoCorrecao,
        tema,
        notaTotal: nota
      }
    });
    // Inclui o texto original e a url da imagem na resposta
    res.json({ correcao, nota, essay, texto, urlImage });
  } catch (err) {
    console.error("Erro ao processar a reda√ß√£o:", err); // <-- log detalhado
    res.status(500).json({ error: 'Erro ao processar a reda√ß√£o.' });
  }
});

export default router;