import express from 'express';
import { PrismaClient } from '@prisma/client';
import { GoogleGenerativeAI } from '@google/generative-ai';
import multer from 'multer';
import { createClient } from '@supabase/supabase-js';
import axios from 'axios'; // Adicione esta linha no topo

const router = express.Router();
const prisma = new PrismaClient();
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Configura√ß√£o do Supabase
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

// Configura√ß√£o do multer para upload de imagem
const upload = multer({ storage: multer.memoryStorage() });

router.post('/', upload.single('imagem'), async (req, res) => {
  const { tipoCorrecao, tema, texto } = req.body;
  const file = req.file;

  if (!req.user) {
    return res.status(401).json({ error: 'Usu√°rio n√£o autenticado.' });
  }

  // Impede envio de texto e imagem juntos
  if ((file && texto && texto.trim()) || (!file && (!texto || !texto.trim()))) {
    return res.status(400).json({ error: 'Envie apenas o texto digitado OU apenas a imagem da reda√ß√£o.' });
  }

  // Padroniza o tipo de corre√ß√£o para min√∫sculo
  const tipo = tipoCorrecao ? tipoCorrecao.toLowerCase() : '';

  // Prompt personalizado conforme o tipo de corre√ß√£o (igual ao gemini.js)
  let prompt = '';
  if (tipo === 'enem') {
    prompt = `
    Texto para corre√ß√£o (Tema: ${tema}):
    ${texto}
Voc√™ √© uma IA corretora de reda√ß√µes dissertativo-argumentativas no padr√£o do ENEM. Avalie o texto com base nas cinco compet√™ncias da Matriz de Refer√™ncia do ENEM, atribuindo notas conforme os crit√©rios oficiais, utilizando as faixas de 0‚Äì40‚Äì80‚Äì120‚Äì160‚Äì200 pontos para cada compet√™ncia, totalizando at√© 1000 pontos.

Para cada compet√™ncia:

Atribua uma nota entre os n√≠veis oficiais (0, 40, 80, 120, 160 ou 200).

Fundamente a nota com base nos descritores oficiais do INEP.

Aponte os erros espec√≠ficos que justificam a redu√ß√£o da pontua√ß√£o.

üß† Compet√™ncia I ‚Äî Dom√≠nio da Norma Culta
Crit√©rios de pontua√ß√£o:

200: Sem desvios gramaticais ou com no m√°ximo 1 desvio leve.

160: Poucos desvios leves, sem prejudicar a leitura.

120: V√°rios desvios que n√£o comprometem totalmente o entendimento.

80: Muitos erros que dificultam a leitura.

40: Dom√≠nio prec√°rio da norma, com trechos inintelig√≠veis.

0: Texto anulado ou ileg√≠vel.

A√ß√£o esperada da IA: Identificar todos os erros gramaticais, ortogr√°ficos e de concord√¢ncia. Para cada erro:

Apontar o trecho.

Explicar o erro.

Sugerir a forma correta.

üìö Compet√™ncia II ‚Äî Compreens√£o da Proposta e Aplica√ß√£o de Conhecimentos
Crit√©rios de pontua√ß√£o:

200: Tema completamente abordado com repert√≥rio legitimado e produtivo.

160: Tema bem abordado, mas com uso pouco produtivo do repert√≥rio.

120: Tema abordado com alguma limita√ß√£o ou 1 parte embrion√°ria.

80: Abordagem incompleta ou 2 partes embrion√°rias.

40: Tang√™ncia ao tema, uso de c√≥pia dos textos motivadores, tra√ßos de outro tipo textual.

0: Fuga ao tema ou tipo textual incorreto.

A√ß√£o esperada da IA: Analisar:

Se o tema foi integralmente compreendido e desenvolvido.

Se houve uso de repert√≥rio leg√≠timo e pertinente.

Se a estrutura do texto tem introdu√ß√£o, desenvolvimento e conclus√£o proporcionais.

üß© Compet√™ncia III ‚Äî Organiza√ß√£o da Argumenta√ß√£o
Crit√©rios de pontua√ß√£o:

200: Sele√ß√£o e desenvolvimento autoral de ideias com encadeamento excelente.

160: Organiza√ß√£o consistente com argumentos relevantes.

120: Organiza√ß√£o previs√≠vel com argumenta√ß√£o limitada.

80: Estrutura fr√°gil e argumentos pouco desenvolvidos.

40: Contradi√ß√µes, c√≥pia dos textos motivadores, argumenta√ß√£o confusa.

0: Texto anulado.

A√ß√£o esperada da IA: Avaliar:

Clareza da tese.

Qualidade e progress√£o dos argumentos.

Coer√™ncia l√≥gica e originalidade.

üîó Compet√™ncia IV ‚Äî Coes√£o Textual
Crit√©rios de pontua√ß√£o:

200: Repert√≥rio diversificado e adequado de elementos coesivos (intra e interpar√°grafo).

160: Poucas inadequa√ß√µes e boa variedade de conectivos.

120: Uso razo√°vel, mas com repeti√ß√µes e conectivos simples.

80: Coes√£o prec√°ria com repeti√ß√µes ou lacunas.

40: Conectivos inertes, justaposi√ß√£o de frases ou texto em monobloco.

0: Texto desconexo ou ileg√≠vel.

A√ß√£o esperada da IA: Identificar:

Se h√° operadores argumentativos suficientes e bem usados.

Se h√° conex√£o entre par√°grafos e dentro dos par√°grafos.

Se h√° repeti√ß√£o excessiva ou aus√™ncia de liga√ß√£o.

üõ†Ô∏è Compet√™ncia V ‚Äî Proposta de Interven√ß√£o
Crit√©rios de pontua√ß√£o:

200: Proposta completa, com os 5 elementos (a√ß√£o, agente, meio, efeito e detalhamento), vi√°vel e respeitando os direitos humanos.

160: 4 elementos presentes, com boa articula√ß√£o.

120: 3 elementos ou proposta gen√©rica.

80: 2 elementos ou interven√ß√£o vaga.

40: Proposta incompleta, sem detalhamento.

0: Aus√™ncia de proposta ou viola√ß√£o dos direitos humanos.

A√ß√£o esperada da IA: Identificar:

Se h√° proposta completa.

Se os 5 elementos est√£o presentes e articulados.

Se a proposta √© vi√°vel e respeita direitos humanos.

üéØ Resultado Final:
Nota total (soma das 5 compet√™ncias).
IMPORTANTE: Ao final da resposta, escreva a nota total no formato: "Nota Final: [valor num√©rico]".

Coment√°rios explicativos e sugest√µes para cada compet√™ncia.

Dica personalizada de melhoria ao final.
Texto para corre√ß√£o:
${texto}
`;
  } else if (tipo === 'fuvest') {
    prompt = `
    Texto para corre√ß√£o (Tema: ${tema}):
    ${texto}
Avalie a reda√ß√£o abaixo conforme os crit√©rios oficiais da FUVEST, atribuindo nota de 10 a 50 pontos. Siga esta estrutura:

Crit√©rios de Avalia√ß√£o:

1. Desenvolvimento do tema e organiza√ß√£o do texto dissertativo-argumentativo:
- Verifique se o texto √© uma disserta√ß√£o argumentativa e atende ao tema proposto.
- Avalie a capacidade de compreender a proposta, relacionar ideias e informa√ß√µes, pertin√™ncia das informa√ß√µes, progress√£o tem√°tica e capacidade cr√≠tico-argumentativa.
- Evite par√°frase da proposta e textos meramente expositivos.

2. Coer√™ncia dos argumentos e articula√ß√£o das partes do texto:
- Avalie a coer√™ncia dos argumentos, organiza√ß√£o das ideias, conclus√µes apropriadas, planejamento e constru√ß√£o significativa do texto.
- Verifique a coes√£o textual, uso adequado de conectivos e rela√ß√µes sem√¢nticas entre as partes do texto.

3. Corre√ß√£o gramatical e adequa√ß√£o vocabular:
- Avalie o dom√≠nio da norma-padr√£o da L√≠ngua Portuguesa, clareza na express√£o das ideias, ortografia, morfologia, sintaxe, pontua√ß√£o e vocabul√°rio.
- Considere precis√£o, concis√£o e adequa√ß√£o do vocabul√°rio ao tipo de texto.

Notas:
- Para cada um dos tr√™s crit√©rios, atribua uma nota de 1 a 5.
- Multiplique as notas por 4, 3 e 3, respectivamente, para obter a nota ponderada.
- Some as notas ponderadas para obter a nota final (m√≠nimo 10, m√°ximo 50 pontos).
IMPORTANTE: Ao final da resposta, escreva a nota total no formato: "Nota Final: [valor num√©rico]".

Pontos Fortes e Pontos a Melhorar:
- Liste 2 pontos positivos e 2 aspectos que podem ser aprimorados.

Sugest√µes de Melhoria:
- Ofere√ßa recomenda√ß√µes espec√≠ficas para elevar a nota em cada crit√©rio.

Texto para corre√ß√£o:
${texto}
`;
  } else {
    prompt = `
Corrija o texto abaixo considerando crit√©rios gerais de reda√ß√£o.
Atribua uma nota de 0 a 100 e fa√ßa coment√°rios detalhados sobre os pontos positivos e negativos.
IMPORTANTE: Ao final da resposta, escreva a nota total no formato: "Nota Final: [valor num√©rico]".

Texto do aluno:
${texto}
`;
  }

  // Upload da imagem para o Supabase, se houver
  let urlImage = null;
  let geminiImagePart = null;
  if (file) {
    try {
      // Sanitiza o nome do arquivo para evitar caracteres inv√°lidos no Supabase
      const originalName = file.originalname.replace(/[^a-zA-Z0-9.\-_]/g, '_');
      const filePath = `${Date.now()}_${originalName}`;
      const { error } = await supabase.storage
        .from("redator")
        .upload(filePath, file.buffer, { contentType: file.mimetype });
      if (error) throw error;
      urlImage = supabase.storage.from("redator").getPublicUrl(filePath).data.publicUrl;

      // Baixa a imagem do Supabase para obter o buffer
      const response = await axios.get(urlImage, { responseType: 'arraybuffer' });
      const buffer = Buffer.from(response.data, 'binary');
      const base64 = buffer.toString('base64');
      geminiImagePart = {
        inlineData: {
          data: base64,
          mimeType: file.mimetype
        }
      };
    } catch (err) {
      console.error("Erro ao enviar imagem para o Supabase ou preparar imagem para Gemini:", err.message);
      return res.status(500).json({ error: "Erro ao enviar imagem." });
    }
  }

  try {
    // Monta entrada para Gemini (texto ou multimodal)
    let geminiInput;
    if (geminiImagePart) {
      // Entrada multimodal: prompt + imagem (base64)
      geminiInput = [
        { text: prompt },
        geminiImagePart
      ];
    } else {
      geminiInput = prompt;
    }

    // Usa o modelo Gemini 1.5 Flash
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(geminiInput);
    const response = await result.response;
    const correcao = response.text();

    // LOG para depura√ß√£o
    console.log('Texto da corre√ß√£o:', correcao);

    // Regex robusto para pegar a nota final (mesmo com espa√ßos, quebras de linha, etc)
    const notaMatch =
      correcao.match(/nota\s*final[^0-9]{0,10}(\d{2,4})/i) ||
      correcao.match(/nota[^0-9]{0,10}(\d{2,4})/i);

    console.log('Resultado do regex da nota:', notaMatch);

    const nota = notaMatch ? Number(notaMatch[1]) : null;
    console.log('Nota extra√≠da:', nota);

    const essay = await prisma.essay.create({
      data: {
        text: texto && texto.trim() ? texto : null,
        urlImage: urlImage,
        authorId: req.user.id,
        corrigidaPor: "ia",
        correcaoIa: correcao,
        tipoCorrecao,
        tema,
        notaTotal: nota
      }
    });
    // Inclui o texto original e a url da imagem na resposta
    res.json({ correcao, nota, essay, texto, urlImage });
  } catch (err) {
    console.error("Erro ao processar a reda√ß√£o:", err); // <-- log detalhado
    res.status(500).json({ error: 'Erro ao processar a reda√ß√£o.' });
  }
});

export default router;