generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  name           String
  password       String
  tipo           String   // "estudante" ou "corretor"
  emailVerificado Boolean @default(false)
  fotoPerfil     String?
  descricao      String?
  createdAt      DateTime @default(now())
  // Relações
  redacoesAutor      Essay[]    @relation("RedacoesAutor")
  redacoesCorrigidas Essay[]    @relation("RedacoesCorretor")
  corretor           Corretor?
  estudante          Estudante?
  @@map("users") // <-- Adicione esta linha
  Correction Correction[]
}

model Corretor {
  id           Int    @id @default(autoincrement())
  userId       Int    @unique
  user         User   @relation(fields: [userId], references: [id])
  experiencia  String?
  escolaridade String?
  certificado  String?
  aprovado     Boolean? @default(false)
  rating       Float?   @default(0.0) // <-- agora só aqui
}

model Estudante {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  instagram   String?
  interesses  String[]
  // Adicione outros campos exclusivos do estudante aqui, se houver
}

model Essay {
  id           Int      @id @default(autoincrement())
  text         String?
  urlImage     String?
  authorId     Int
  author       User     @relation("RedacoesAutor", fields: [authorId], references: [id])
  corretorId   Int?
  corretor     User?    @relation("RedacoesCorretor", fields: [corretorId], references: [id])
  corrigidaPor String?
  correcaoIa   String?
  tipoCorrecao String?
  tema         String?
  createdAt    DateTime @default(now())
  notaTotal    Float?
  // NOVO: flags de visualização pelo autor
  correcaoVisualizada   Boolean   @default(false)
  correcaoVisualizadaEm DateTime?
  // NOVO: relação com correções
  corrections  Correction[]
}

model Correction {
  id                Int          @id @default(autoincrement())
  essayId           Int
  essay             Essay        @relation(fields: [essayId], references: [id])
  corretorId        Int
  corretor          User         @relation(fields: [corretorId], references: [id])
  notas             Json?
  notaTotal         Float?
  comentariosGerais String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  annotations       Annotation[]
}

model Annotation {
  id           Int        @id @default(autoincrement())
  correctionId Int
  correction   Correction @relation(fields: [correctionId], references: [id])
  tipo         String     // 'texto' | 'imagem'
  // Texto:
  rangeStart   Int?
  rangeEnd     Int?
  snippet      String?
  // Imagem:
  rects        Json?      // [{x,y,w,h}]
  // Comum:
  color        String?
  comment      String?
  createdAt    DateTime   @default(now())
}

model Tema {
  id                Int               @id @default(autoincrement())
  tipo              String
  titulo            String
  imagem            String
  instrucoes        String
  proposta          String
  createdAt         DateTime          @default(now())
  textosMotivadores TextoMotivador[]
}

model TextoMotivador {
  id        Int    @id @default(autoincrement())
  tipo      String
  valor     String
  fonte     String?
  temaId    Int
  tema      Tema   @relation(fields: [temaId], references: [id])
}