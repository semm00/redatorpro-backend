generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  password     String
  tipo         String   // "estudante" ou "corretor"
  experiencia  String?  // só para corretor
  escolaridade String?  // só para corretor
  certificado  String?  // só para corretor (URL ou nome do arquivo)
  aprovado     Boolean? @default(false) // só para corretor
  emailVerificado Boolean @default(false) // <-- novo campo
  instagram      String?    // novo campo
  fotoPerfil     String?    // novo campo
  descricao      String?    // novo campo
  interesses     String[]   // novo campo: lista de áreas de interesse
  essays       Essay[]
  createdAt    DateTime @default(now()) 
  rating        Float?   @default(0.0) // <-- novo campo para avaliação do corretor
}

model Essay {
  id           Int      @id @default(autoincrement())
  text         String?
  urlImage     String?
  author       users    @relation(fields: [authorId], references: [id])
  authorId     Int
  corrigidaPor String?  // "ia" ou "corretor"
  correcaoIa   String?  // resposta da IA, se houver
  tipoCorrecao String?  // tipo de correção (opcional)
  tema         String?  // tema da redação (opcional)
  createdAt    DateTime @default(now())
  notaTotal    Float?   // <-- campo para a nota total
}

model Tema {
  id              Int               @id @default(autoincrement())
  tipo            String            // Tipo de tema (ENEM, Vestibular, Concursos)
  titulo          String            // Título do tema
  imagem          String            // URL da imagem (armazenada no Supabase)
  instrucoes      String            // Instruções para redação
  proposta        String            // Proposta de redação
  createdAt       DateTime          @default(now())
  textosMotivadores TextoMotivador[]
}

model TextoMotivador {
  id        Int    @id @default(autoincrement())
  tipo      String // "texto" ou "imagem"
  valor     String // texto motivador ou URL da imagem
  fonte     String? // <-- novo campo: fonte do texto motivador
  tema      Tema   @relation(fields: [temaId], references: [id])
  temaId    Int
}